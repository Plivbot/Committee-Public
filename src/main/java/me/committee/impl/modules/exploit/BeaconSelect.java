package me.committee.impl.modules.exploit;

import io.netty.buffer.Unpooled;
import me.committee.api.eventsystem.annotation.EventSubscribe;
import me.committee.api.module.Module;
import me.committee.api.setting.Setting;
import me.committee.impl.event.events.network.SendPacketEvent;
import net.minecraft.init.MobEffects;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.CPacketCustomPayload;
import net.minecraft.potion.Potion;

public class BeaconSelect extends Module {

    private final Setting<Effect> potion = new Setting<>("Potion", new String[]{"Effect"}, "The effect to use for the beacon.", Effect.REGEN);

    public BeaconSelect() {
        super("BeaconSelect", new String[]{"BeaconDelimiter","BeaconTroller",   "BeaconMoment"}, "Allows you to get high level effects on low level beacons (also allows for Regen II beacons).", Category.EXPLOIT);
    }

    private CPacketCustomPayload noCancelPacket;

    @EventSubscribe
    public void onSendPacket(SendPacketEvent event) {
        if (event.getPacket() instanceof CPacketCustomPayload && event.getPacket() != this.noCancelPacket) {
            if (((CPacketCustomPayload) event.getPacket()).getChannelName().equals("MC|Beacon")) {
                event.setCancelled(true);

                PacketBuffer packetbuffer = new PacketBuffer(Unpooled.buffer());
                packetbuffer.writeInt(Potion.getIdFromPotion(potion.getValue().potion));
                packetbuffer.writeInt(Potion.getIdFromPotion(potion.getValue().potion));
                this.noCancelPacket = new CPacketCustomPayload("MC|Beacon", packetbuffer);

                mc.player.connection.sendPacket(this.noCancelPacket);
            }
        }
    }

    private enum Effect {
        SPEED(MobEffects.SPEED),
        HASTE(MobEffects.HASTE),
        RESISTANCE(MobEffects.RESISTANCE),
        JUMP_BOOST(MobEffects.JUMP_BOOST),
        STRENGTH(MobEffects.STRENGTH),
        REGEN(MobEffects.REGENERATION);

        final Potion potion;

        Effect(Potion potion) {
            this.potion = potion;
        }

    }


}
