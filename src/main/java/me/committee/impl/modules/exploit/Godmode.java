package me.committee.impl.modules.exploit;

import me.committee.api.eventsystem.annotation.EventSubscribe;
import me.committee.api.module.Module;
import me.committee.api.setting.Setting;
import me.committee.impl.event.events.network.ReceivePacketEvent;
import me.committee.impl.event.events.network.SendPacketEvent;
import me.committee.impl.event.events.player.PlayerUpdateEvent;
import net.minecraft.entity.Entity;
import net.minecraft.entity.passive.AbstractChestHorse;
import net.minecraft.entity.passive.EntityDonkey;
import net.minecraft.network.play.client.CPacketClientStatus;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketVehicleMove;

public class Godmode extends Module {

    private final Setting<Mode> mode = new Setting<>("Mode", new String[]{"M"}, "The mode of godmode to use.", Mode.NETHER_PORTAL);

    public Godmode() {
        super("Godmode", new String[]{"InsaneOP"}, "Allows you to be invincible.", Category.EXPLOIT);
    }

    private Entity desyncedEntity;

    @Override
    public void onEnable() {
        super.onEnable();
        this.desyncedEntity = null;

        if (this.mode.getValue() == Mode.DESYNC && mc.player.isRiding() && mc.player != null) {
            this.desyncedEntity = mc.player.getRidingEntity();
            mc.player.dismountRidingEntity();
            mc.world.removeEntity(this.desyncedEntity);
        }
    }

    @Override
    public void onDisable() {
        super.onDisable();
        if (this.desyncedEntity != null && mc.player != null) {
            this.desyncedEntity.isDead = false;

            if (!mc.player.isRiding()) {
                mc.world.spawnEntity(this.desyncedEntity);
                mc.player.startRiding(this.desyncedEntity, true);
            }
            this.desyncedEntity = null;
        }
    }

    @EventSubscribe
    public void onPlayerUpdate(PlayerUpdateEvent event) {
        if (!mc.player.isRiding() && this.desyncedEntity != null) {
            mc.player.onGround = true;
            this.desyncedEntity.setPosition(mc.player.posX, mc.player.posY, mc.player.posZ);
            mc.player.connection.sendPacket(new CPacketVehicleMove(this.desyncedEntity));
        }
    }

    @EventSubscribe
    public void onPacketSend(SendPacketEvent event) {
        if (mode.getValue() == Mode.NETHER_PORTAL && event.getPacket() instanceof CPacketConfirmTeleport) event.cancel();
        else if (mode.getValue() == Mode.END_PORTAL && event.getPacket() instanceof CPacketClientStatus) event.cancel();
    }

    private enum Mode {
        NETHER_PORTAL, END_PORTAL, DESYNC
    }

}
