package me.committee.impl.modules.exploit;

import me.committee.api.eventsystem.annotation.EventSubscribe;
import me.committee.api.module.Module;
import me.committee.api.setting.Setting;
import me.committee.api.util.MathUtil;
import me.committee.impl.event.events.blocks.AddCollisionBoxEvent;
import me.committee.impl.event.events.player.PlayerUpdateEvent;
import me.committee.impl.event.events.render.SuffocationOverlayEvent;
import me.committee.impl.event.events.player.PushOutOfBlocksEvent;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;

public class Phase extends Module {

    private final Setting<Mode> mode = new Setting<>("Mode", new String[]{"M"}, "The mode of phase to use.", Mode.BYPASS);
    private final Setting<Boolean> timerFix = new Setting<>("TimerFix", new String[]{"DisableCollision", "Collide", "DisableCollide"}, "Disables block collisions on mode bypass. Allows timer to be used easier.", true);
    private final Setting<Boolean> down = new Setting<>("Down", new String[]{"ShiftDown", "AllowDown"}, "Allows you to go down when you shift.", true);

    public Phase() {
        super("Phase", new String[]{"IDCABOUTFUCKINGWALLS", "IDCABOUTFUCKINGBALLS", "P"}, "Allows you to walk through walls.", Category.EXPLOIT);
    }

    @EventSubscribe
    public void onPlayerUpdate(PlayerUpdateEvent event) {
        if (this.mode.getValue() == Mode.BYPASS) {
            if (!mc.player.collidedHorizontally)
                return;

            this.vclip();
        }

    }

    private void vclip() {
        final double[] dirSpeed = MathUtil.directionSpeed(0.0225f);
        mc.player.connection.sendPacket(
                new CPacketPlayer.PositionRotation(
                        mc.player.posX + dirSpeed[0],
                        mc.player.posY + 1.0E-6d,
                        mc.player.posZ + dirSpeed[1],
                        mc.player.rotationYaw,
                        mc.player.rotationPitch,
                        false
                ));
        mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(mc.player.posX, mc.player.posY - 6969, mc.player.posZ, mc.player.rotationYaw, mc.player.rotationPitch, true));
        mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_FALL_FLYING));
        mc.player.motionX = mc.player.motionY = mc.player.motionZ = 0.0D;
    }

    @EventSubscribe
    public void onPushOutOfBlocks(PushOutOfBlocksEvent event) {
        if (this.mode.getValue() == Mode.BYPASS)
            event.cancel();
    }

    @EventSubscribe
    public void onAddCollisionBox(AddCollisionBoxEvent event) {
        if (this.mode.getValue() == Mode.BYPASS && ((this.timerFix.getValue() && mc.player.collidedHorizontally) || (this.down.getValue() && mc.gameSettings.keyBindSneak.isKeyDown())))
            event.cancel();
    }

    @EventSubscribe
    public void onSuffocationOverlay(SuffocationOverlayEvent event) {
        event.cancel();
    }

    private enum Mode {
        BYPASS
    }

}
